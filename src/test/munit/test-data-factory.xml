<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
      xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xsi:schemaLocation="
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
        http://www.mulesoft.org/schema/mule/munit-tools http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
        http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">

    <!-- Test Data Factory - Generates consistent test data across all test suites -->
    <munit:config name="test-data-factory"/>

    <!-- ========================================== -->
    <!-- Environmental Data Factory -->
    <!-- ========================================== -->

    <sub-flow name="create-environmental-station-data" doc:name="Create Environmental Station Data">
        <ee:transform doc:name="Generate Environmental Station">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
var stationId = vars.stationId default "TEST_STATION_001"
var city = vars.city default "Test City"
var latitude = vars.latitude default 40.7128
var longitude = vars.longitude default -74.0060
var riskScore = vars.riskScore default 3
var aqi = vars.aqi default 85
var temperature = vars.temperature default 22.5
var visibility = vars.visibility default 10
---
{
    stationId: stationId,
    city: city,
    country: "Test Country",
    coordinates: {
        latitude: latitude,
        longitude: longitude
    },
    airQuality: {
        aqi: aqi,
        level: if (aqi <= 50) "Good"
               else if (aqi <= 100) "Moderate"
               else if (aqi <= 150) "Unhealthy for Sensitive Groups"
               else if (aqi <= 200) "Unhealthy"
               else "Very Unhealthy",
        pollutants: {
            pm25: aqi * 0.3,
            pm10: aqi * 0.4,
            no2: aqi * 0.5,
            o3: aqi * 0.7,
            so2: aqi * 0.1,
            co: aqi * 0.01
        },
        lastUpdated: now()
    },
    weather: {
        temperature: temperature,
        humidity: 65,
        pressure: 1013.25,
        windSpeed: 12,
        windDirection: 180,
        visibility: visibility,
        condition: if (visibility >= 10) "Clear"
                   else if (visibility >= 5) "Partly Cloudy"
                   else "Foggy",
        description: "Test weather conditions",
        feelsLike: temperature + 2.0,
        tempMin: temperature - 5.0,
        tempMax: temperature + 5.0
    },
    riskAssessment: {
        riskScore: riskScore,
        emergencyLevel: if (riskScore <= 3) "LOW"
                       else if (riskScore <= 5) "MEDIUM"
                       else if (riskScore <= 7) "HIGH"
                       else "CRITICAL",
        coordinationRequired: riskScore > 5,
        estimatedResponseTime: if (riskScore > 7) "15 minutes"
                              else if (riskScore > 5) "30 minutes"
                              else "Not required",
        riskFactors: if (riskScore > 7) ["High pollution", "Poor visibility"]
                     else if (riskScore > 5) ["Moderate pollution"]
                     else [],
        lastAssessment: now(),
        weatherImpact: if (visibility < 5) "HIGH"
                      else if (visibility < 10) "MODERATE"
                      else "MINIMAL",
        airQualityImpact: if (aqi > 150) "HIGH"
                         else if (aqi > 100) "MODERATE"
                         else "MINIMAL"
    },
    dataSource: "ChainSync Test Data Factory",
    timestamp: now() as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"},
    isRealTime: true
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </sub-flow>

    <sub-flow name="create-multiple-environmental-stations" doc:name="Create Multiple Environmental Stations">
        <ee:transform doc:name="Generate Multiple Stations">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
var stations = [
    {stationId: "NYC_TEST_001", city: "New York", latitude: 40.7128, longitude: -74.0060, riskScore: 4, aqi: 85},
    {stationId: "LON_TEST_001", city: "London", latitude: 51.5074, longitude: -0.1278, riskScore: 6, aqi: 112},
    {stationId: "TOK_TEST_001", city: "Tokyo", latitude: 35.6762, longitude: 139.6503, riskScore: 5, aqi: 95},
    {stationId: "BEI_TEST_001", city: "Beijing", latitude: 39.9042, longitude: 116.4074, riskScore: 8, aqi: 178},
    {stationId: "MUM_TEST_001", city: "Mumbai", latitude: 19.0760, longitude: 72.8777, riskScore: 7, aqi: 145},
    {stationId: "SYD_TEST_001", city: "Sydney", latitude: -33.8688, longitude: 151.2093, riskScore: 2, aqi: 42}
]
---
{
    data: stations map ((station) -> {
        stationId: station.stationId,
        city: station.city,
        country: "Test Country",
        coordinates: {
            latitude: station.latitude,
            longitude: station.longitude
        },
        airQuality: {
            aqi: station.aqi,
            level: if (station.aqi <= 50) "Good"
                   else if (station.aqi <= 100) "Moderate"
                   else if (station.aqi <= 150) "Unhealthy for Sensitive Groups"
                   else "Unhealthy",
            pollutants: {
                pm25: station.aqi * 0.3,
                pm10: station.aqi * 0.4,
                no2: station.aqi * 0.5,
                o3: station.aqi * 0.7,
                so2: station.aqi * 0.1,
                co: station.aqi * 0.01
            }
        },
        weather: {
            temperature: 20 + (station.riskScore * 2),
            humidity: 60 + (station.riskScore * 5),
            visibility: 15 - station.riskScore,
            condition: "Test Condition"
        },
        riskAssessment: {
            riskScore: station.riskScore,
            emergencyLevel: if (station.riskScore <= 3) "LOW"
                           else if (station.riskScore <= 5) "MEDIUM"
                           else if (station.riskScore <= 7) "HIGH"
                           else "CRITICAL",
            coordinationRequired: station.riskScore > 5
        },
        timestamp: now() as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"}
    }),
    metadata: {
        totalStations: sizeOf(stations),
        recordsReturned: sizeOf(stations),
        riskSummary: {
            criticalStations: sizeOf(stations filter ($.riskScore >= 8)),
            highRiskStations: sizeOf(stations filter ($.riskScore >= 6 and $.riskScore < 8)),
            mediumRiskStations: sizeOf(stations filter ($.riskScore >= 4 and $.riskScore < 6)),
            lowRiskStations: sizeOf(stations filter ($.riskScore < 4))
        }
    }
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </sub-flow>

    <!-- ========================================== -->
    <!-- Fleet Data Factory -->
    <!-- ========================================== -->

    <sub-flow name="create-fleet-vehicle-data" doc:name="Create Fleet Vehicle Data">
        <ee:transform doc:name="Generate Fleet Vehicle">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
var vehicleId = vars.vehicleId default "TEST_VEHICLE_001"
var driverId = vars.driverId default "TEST_DRIVER_001"
var driverName = vars.driverName default "Test Driver"
var location = vars.location default "Test Location"
var latitude = vars.latitude default 40.7128
var longitude = vars.longitude default -74.0060
var riskScore = vars.riskScore default 3
var speed = vars.speed default 65
var hoursOnDuty = vars.hoursOnDuty default 6.5
var safetyScore = vars.safetyScore default 8
var fuelLevel = vars.fuelLevel default 75
---
{
    vehicleId: vehicleId,
    driverId: driverId,
    driverName: driverName,
    vehicleType: "Test Vehicle",
    location: location,
    coordinates: {
        latitude: latitude,
        longitude: longitude
    },
    telematicsData: {
        speed: speed,
        averageSpeed: speed - 7,
        brakingEvents: if (safetyScore > 7) 1 else 3,
        accelerationEvents: if (safetyScore > 7) 0 else 2,
        fuelEfficiency: 25.0 - (speed - 60) * 0.1,
        engineStatus: if (fuelLevel > 20) "NORMAL" else "WARNING",
        batteryLevel: 95,
        tirePressure: "NORMAL",
        odometerReading: 87500,
        engineHours: 1750,
        lastGPSUpdate: now() as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"}
    },
    driverMetrics: {
        hoursOnDuty: hoursOnDuty,
        milesThisShift: (hoursOnDuty * speed) as Number,
        safetyScore: safetyScore,
        lastBreak: (now() - |PT2H|) as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"},
        totalDrivingTime: hoursOnDuty ++ " hours",
        speedingViolations: if (safetyScore > 8) 0 else 1,
        idleTime: "15 minutes"
    },
    vehicleHealth: {
        mileage: 87500,
        lastServiceDate: "2025-05-15",
        nextServiceDue: 92500,
        maintenanceStatus: if (fuelLevel > 50) "CURRENT" else "DUE_SOON",
        fuelLevel: fuelLevel,
        engineTemp: 195,
        oilPressure: "NORMAL",
        brakeStatus: "GOOD",
        transmissionStatus: "NORMAL"
    },
    riskAssessment: {
        riskScore: riskScore,
        status: if (riskScore <= 3) "LOW"
               else if (riskScore <= 5) "MEDIUM"
               else if (riskScore <= 7) "HIGH"
               else "CRITICAL",
        coordinationRequired: riskScore > 5 or hoursOnDuty > 8,
        estimatedResponseTime: if (riskScore > 7) "15 minutes"
                              else if (riskScore > 5) "30 minutes"
                              else "Not required",
        riskFactors: if (hoursOnDuty > 8) ["Driver fatigue"] else [],
        lastRiskAssessment: now() as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"},
        riskTrend: "STABLE"
    },
    dataSource: "ChainSync Test Data Factory",
    timestamp: now() as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"},
    isRealTime: true
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </sub-flow>

    <sub-flow name="create-multiple-fleet-vehicles" doc:name="Create Multiple Fleet Vehicles">
        <ee:transform doc:name="Generate Multiple Vehicles">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
var vehicles = [
    {vehicleId: "TRUCK_TEST_001", driverId: "D_TEST_001", driverName: "John Test", location: "New York", riskScore: 3, hoursOnDuty: 6.5, safetyScore: 8},
    {vehicleId: "TRUCK_TEST_002", driverId: "D_TEST_002", driverName: "Sarah Test", location: "Chicago", riskScore: 7, hoursOnDuty: 9.0, safetyScore: 6},
    {vehicleId: "TRUCK_TEST_003", driverId: "D_TEST_003", driverName: "Mike Test", location: "Los Angeles", riskScore: 4, hoursOnDuty: 5.0, safetyScore: 9},
    {vehicleId: "TRUCK_TEST_004", driverId: "D_TEST_004", driverName: "Lisa Test", location: "Houston", riskScore: 2, hoursOnDuty: 4.5, safetyScore: 10},
    {vehicleId: "TRUCK_TEST_005", driverId: "D_TEST_005", driverName: "Tom Test", location: "Phoenix", riskScore: 6, hoursOnDuty: 8.5, safetyScore: 7},
    {vehicleId: "TRUCK_TEST_006", driverId: "D_TEST_006", driverName: "Amy Test", location: "Philadelphia", riskScore: 5, hoursOnDuty: 7.0, safetyScore: 8}
]
---
{
    data: vehicles map ((vehicle) -> {
        vehicleId: vehicle.vehicleId,
        driverId: vehicle.driverId,
        driverName: vehicle.driverName,
        vehicleType: "Semi Truck",
        location: vehicle.location,
        coordinates: {
            latitude: 40.0 + (vehicle.riskScore * 2),
            longitude: -75.0 - (vehicle.riskScore * 3)
        },
        telematicsData: {
            speed: 65,
            averageSpeed: 58,
            brakingEvents: if (vehicle.safetyScore > 7) 1 else 3,
            fuelEfficiency: 24.5
        },
        driverMetrics: {
            hoursOnDuty: vehicle.hoursOnDuty,
            safetyScore: vehicle.safetyScore,
            milesThisShift: (vehicle.hoursOnDuty * 60) as Number
        },
        vehicleHealth: {
            fuelLevel: 75,
            maintenanceStatus: "CURRENT"
        },
        riskAssessment: {
            riskScore: vehicle.riskScore,
            status: if (vehicle.riskScore <= 3) "LOW"
                   else if (vehicle.riskScore <= 5) "MEDIUM"
                   else if (vehicle.riskScore <= 7) "HIGH"
                   else "CRITICAL",
            coordinationRequired: vehicle.riskScore > 5 or vehicle.hoursOnDuty > 8
        },
        timestamp: now() as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"}
    }),
    metadata: {
        totalVehicles: sizeOf(vehicles),
        recordsReturned: sizeOf(vehicles),
        riskSummary: {
            criticalVehicles: sizeOf(vehicles filter ($.riskScore >= 8)),
            highRiskVehicles: sizeOf(vehicles filter ($.riskScore >= 6 and $.riskScore < 8)),
            mediumRiskVehicles: sizeOf(vehicles filter ($.riskScore >= 4 and $.riskScore < 6)),
            lowRiskVehicles: sizeOf(vehicles filter ($.riskScore < 4))
        }
    }
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </sub-flow>

    <!-- ========================================== -->
    <!-- Alert Data Factory -->
    <!-- ========================================== -->

    <sub-flow name="create-environmental-alert" doc:name="Create Environmental Alert">
        <ee:transform doc:name="Generate Environmental Alert">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
var stationId = vars.stationId default "TEST_STATION_001"
var city = vars.city default "Test City"
var alertLevel = vars.alertLevel default "HIGH"
var riskScore = vars.riskScore default 7
var triggerCondition = vars.triggerCondition default "Test environmental alert condition"
---
{
    alertId: "ENV_ALERT_" ++ stationId ++ "_" ++ (now() as String {format: "yyyyMMdd_HHmmss"}),
    stationId: stationId,
    city: city,
    alertLevel: alertLevel,
    riskScore: riskScore,
    triggerCondition: triggerCondition,
    coordinationWorkflow: {
        workflowId: "ENV_WF_" ++ (now() as String {format: "yyyyMMdd_HHmmss"}),
        meetingScheduled: riskScore > 6,
        estimatedMeetingTime: if (riskScore > 7) (now() + |PT30M|) as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"}
                             else (now() + |PT1H|) as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"},
        stakeholders: if (riskScore > 7) ["Environmental Response Team", "Public Health Officials", "Emergency Services"]
                     else ["Environmental Response Team"],
        actionItems: if (riskScore > 7) ["Issue public health advisory", "Activate air purification systems"]
                    else ["Monitor conditions", "Prepare response plan"]
    },
    createdAt: now() as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"}
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </sub-flow>

    <sub-flow name="create-fleet-alert" doc:name="Create Fleet Alert">
        <ee:transform doc:name="Generate Fleet Alert">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
var vehicleId = vars.vehicleId default "TEST_VEHICLE_001"
var driverId = vars.driverId default "TEST_DRIVER_001"
var driverName = vars.driverName default "Test Driver"
var alertType = vars.alertType default "SAFETY"
var alertLevel = vars.alertLevel default "HIGH"
var riskScore = vars.riskScore default 7
var triggerCondition = vars.triggerCondition default "Test fleet alert condition"
var location = vars.location default "Test Location"
---
{
    alertId: "FLEET_ALERT_" ++ vehicleId ++ "_" ++ (now() as String {format: "yyyyMMdd_HHmmss"}),
    vehicleId: vehicleId,
    driverId: driverId,
    driverName: driverName,
    alertType: alertType,
    alertLevel: alertLevel,
    riskScore: riskScore,
    triggerCondition: triggerCondition,
    location: location,
    coordinationWorkflow: {
        workflowId: "FLEET_WF_" ++ (now() as String {format: "yyyyMMdd_HHmmss"}),
        meetingScheduled: riskScore > 5,
        estimatedResponseTime: if (riskScore > 7) (now() + |PT15M|) as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"}
                              else (now() + |PT30M|) as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"},
        stakeholders: ["Fleet Manager", "Safety Coordinator"] ++ 
                     (if (riskScore > 7) ["Emergency Response Team"] else []),
        actionItems: ["Contact driver", "Assess situation"] ++
                    (if (riskScore > 7) ["Dispatch emergency assistance"] else [])
    },
    slotifyIntegration: {
        enabled: true,
        endpoint: "https://test-slotify-engine/api/fleet-emergency-scheduling",
        schedulingWindow: if (riskScore > 7) "IMMEDIATE" else "PRIORITY"
    },
    createdAt: now() as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"}
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </sub-flow>

    <!-- ========================================== -->
    <!-- Performance Test Data Factory -->
    <!-- ========================================== -->

    <sub-flow name="create-performance-test-data" doc:name="Create Performance Test Data">
        <ee:transform doc:name="Generate Performance Test Dataset">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
var recordCount = vars.recordCount default 100
var baseLatitude = 40.7128
var baseLongitude = -74.0060
---
{
    environmentalStations: (1 to recordCount) map {
        stationId: "PERF_STATION_" ++ ($ as String {format: "000"}),
        city: "Perf City " ++ $,
        coordinates: {
            latitude: baseLatitude + ($ * 0.01),
            longitude: baseLongitude + ($ * 0.01)
        },
        riskScore: ($ mod 10) + 1,
        aqi: 50 + ($ mod 150)
    },
    fleetVehicles: (1 to recordCount) map {
        vehicleId: "PERF_VEHICLE_" ++ ($ as String {format: "000"}),
        driverId: "PERF_DRIVER_" ++ ($ as String {format: "000"}),
        location: "Perf Location " ++ $,
        coordinates: {
            latitude: baseLatitude + ($ * 0.02),
            longitude: baseLongitude + ($ * 0.02)
        },
        riskScore: ($ mod 8) + 1,
        hoursOnDuty: 4.0 + ($ mod 6)
    },
    metadata: {
        recordCount: recordCount,
        generatedAt: now() as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"},
        purpose: "Performance Testing"
    }
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </sub-flow>

    <!-- ========================================== -->
    <!-- Error Scenario Data Factory -->
    <!-- ========================================== -->

    <sub-flow name="create-error-scenario-data" doc:name="Create Error Scenario Data">
        <ee:transform doc:name="Generate Error Scenarios">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
var errorType = vars.errorType default "VALIDATION_ERROR"
---
{
    errorScenarios: [
        {
            scenarioId: "ERROR_001",
            type: "INVALID_STATION_ID",
            stationId: "INVALID_STATION_999",
            expectedStatus: 404,
            expectedMessage: "Station not found"
        },
        {
            scenarioId: "ERROR_002",
            type: "INVALID_VEHICLE_ID",
            vehicleId: "INVALID_VEHICLE_999",
            expectedStatus: 404,
            expectedMessage: "Vehicle not found"
        },
        {
            scenarioId: "ERROR_003",
            type: "UNSUPPORTED_MEDIA_TYPE",
            contentType: "application/xml",
            expectedStatus: 415,
            expectedMessage: "Unsupported media type"
        },
        {
            scenarioId: "ERROR_004",
            type: "METHOD_NOT_ALLOWED",
            method: "PATCH",
            expectedStatus: 405,
            expectedMessage: "Method not allowed"
        },
        {
            scenarioId: "ERROR_005",
            type: "CONNECTIVITY_ERROR",
            simulatedError: "HTTP:CONNECTIVITY",
            expectedBehavior: "Graceful error handling"
        }
    ],
    validationRules: {
        stationIdPattern: "^[A-Z]{3}_[A-Z]+_[0-9]{3}$",
        vehicleIdPattern: "^[A-Z]+_[0-9]{3}$",
        riskScoreRange: {min: 1, max: 10},
        aqiRange: {min: 0, max: 500}
    }
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </sub-flow>

    <!-- ========================================== -->
    <!-- Test Utility Functions -->
    <!-- ========================================== -->

    <sub-flow name="generate-test-timestamp" doc:name="Generate Test Timestamp">
        <ee:transform doc:name="Create Timestamp">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output text/plain
---
now() as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </sub-flow>

    <sub-flow name="generate-test-id" doc:name="Generate Test ID">
        <ee:transform doc:name="Create Test ID">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output text/plain
var prefix = vars.prefix default "TEST"
var suffix = vars.suffix default "001"
---
prefix ++ "_" ++ (now() as String {format: "yyyyMMdd_HHmmss"}) ++ "_" ++ suffix]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </sub-flow>

    <sub-flow name="calculate-risk-level" doc:name="Calculate Risk Level">
        <ee:transform doc:name="Determine Risk Level">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output text/plain
var riskScore = vars.riskScore default 5
---
if (riskScore <= 3) "LOW"
else if (riskScore <= 5) "MEDIUM"
else if (riskScore <= 7) "HIGH"
else "CRITICAL"]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </sub-flow>

</mule>