<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xsi:schemaLocation="
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
        http://www.mulesoft.org/schema/mule/munit-tools http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
        http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">

    <!-- Fleet Coordination Test Suite -->
    <munit:config name="fleet-environmental-coordination-test-suite"/>

    <!-- Test Configuration -->
    <http:request-config name="testHttpRequestConfig">
        <http:request-connection host="localhost" port="8081"/>
    </http:request-config>

    <!-- ========================================== -->
    <!-- Fleet Coordination Recommendations Tests -->
    <!-- ========================================== -->

    <munit:test name="test-get-coordination-recommendations-success" description="Test successful retrieval of coordination recommendations">
        <munit:execution>
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/fleet-coordination/recommendations">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
            <munit-tools:assert-that expression="#[payload.fleetCoordinationRecommendations]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.summary]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.timestamp]" is="#[MunitTools::notNullValue()]"/>
            
            <!-- Validate recommendations structure -->
            <munit-tools:assert-that expression="#[sizeOf(payload.fleetCoordinationRecommendations)]" is="#[MunitTools::greaterThan(0)]"/>
            <munit-tools:assert-that expression="#[payload.fleetCoordinationRecommendations[0].vehicleId]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.fleetCoordinationRecommendations[0].environmentalConditions]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.fleetCoordinationRecommendations[0].actionPriority]" is="#[MunitTools::notNullValue()]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="test-coordination-recommendations-data-integration" description="Test integration of environmental and fleet data">
        <munit:execution>
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/fleet-coordination/recommendations">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
            
            <!-- Validate environmental conditions are included -->
            <ee:transform doc:name="Extract First Recommendation">
                <ee:variables>
                    <ee:set-variable variableName="firstRec">payload.fleetCoordinationRecommendations[0]</ee:set-variable>
                </ee:variables>
            </ee:transform>
            
            <!-- Environmental conditions validation -->
            <munit-tools:assert-that expression="#[vars.firstRec.environmentalConditions.weather]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[vars.firstRec.environmentalConditions.temperature]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[vars.firstRec.environmentalConditions.visibility]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[vars.firstRec.environmentalConditions.airQuality]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[vars.firstRec.environmentalConditions.aqi]" is="#[MunitTools::notNullValue()]"/>
            
            <!-- Validate action priority is valid -->
            <munit-tools:assert-that expression="#[vars.firstRec.actionPriority]" is="#[MunitTools::anyOf([
                MunitTools::equalTo('IMMEDIATE'),
                MunitTools::equalTo('HIGH'),
                MunitTools::equalTo('MEDIUM'),
                MunitTools::equalTo('LOW')
            ])]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="test-coordination-recommendations-summary" description="Test coordination summary calculations">
        <munit:execution>
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/fleet-coordination/recommendations">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
            
            <!-- Validate summary structure -->
            <munit-tools:assert-that expression="#[payload.summary.totalVehicles]" is="#[MunitTools::greaterThan(0)]"/>
            <munit-tools:assert-that expression="#[payload.summary.vehiclesInRiskAreas]" is="#[MunitTools::greaterThanOrEqualTo(0)]"/>
            <munit-tools:assert-that expression="#[payload.summary.immediateActionRequired]" is="#[MunitTools::greaterThanOrEqualTo(0)]"/>
            <munit-tools:assert-that expression="#[payload.summary.weatherAdvisories]" is="#[MunitTools::greaterThanOrEqualTo(0)]"/>
            <munit-tools:assert-that expression="#[payload.summary.airQualityAlerts]" is="#[MunitTools::greaterThanOrEqualTo(0)]"/>
            
            <!-- Validate logical relationships -->
            <munit-tools:assert-that expression="#[payload.summary.vehiclesInRiskAreas]" is="#[MunitTools::lessThanOrEqualTo(payload.summary.totalVehicles)]"/>
            <munit-tools:assert-that expression="#[payload.summary.immediateActionRequired]" is="#[MunitTools::lessThanOrEqualTo(payload.summary.totalVehicles)]"/>
        </munit:validation>
    </munit:test>

    <!-- ========================================== -->
    <!-- Driver Safety Alerts Tests -->
    <!-- ========================================== -->

    <munit:test name="test-get-driver-safety-alerts" description="Test driver safety alerts retrieval">
        <munit:execution>
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/fleet-coordination/driver-safety-alerts">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
            <munit-tools:assert-that expression="#[payload.driverSafetyAlerts]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.summary]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.timestamp]" is="#[MunitTools::notNullValue()]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="test-driver-safety-alerts-structure" description="Test driver safety alerts data structure">
        <munit:execution>
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/fleet-coordination/driver-safety-alerts">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
            
            <!-- Validate summary structure -->
            <munit-tools:assert-that expression="#[payload.summary.totalActiveDrivers]" is="#[MunitTools::greaterThanOrEqualTo(0)]"/>
            <munit-tools:assert-that expression="#[payload.summary.criticalAlerts]" is="#[MunitTools::greaterThanOrEqualTo(0)]"/>
            <munit-tools:assert-that expression="#[payload.summary.recommendedActions]" is="#[MunitTools::notNullValue()]"/>
            
            <!-- Validate recommended actions structure -->
            <munit-tools:assert-that expression="#[payload.summary.recommendedActions.immediateStops]" is="#[MunitTools::greaterThanOrEqualTo(0)]"/>
            <munit-tools:assert-that expression="#[payload.summary.recommendedActions.routeDiversions]" is="#[MunitTools::greaterThanOrEqualTo(0)]"/>
            <munit-tools:assert-that expression="#[payload.summary.recommendedActions.restBreaks]" is="#[MunitTools::greaterThanOrEqualTo(0)]"/>
        </munit:validation>
    </munit:test>

    <!-- ========================================== -->
    <!-- Route Optimization Tests -->
    <!-- ========================================== -->

    <munit:test name="test-get-route-optimization-default" description="Test route optimization with default parameters">
        <munit:execution>
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/fleet-coordination/route-optimization">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
            <munit-tools:assert-that expression="#[payload.routeOptimization]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.routeOptimization.vehicleId]" is="#[MunitTools::equalTo('TRUCK_001')]"/>
            <munit-tools:assert-that expression="#[payload.routeOptimization.origin]" is="#[MunitTools::equalTo('New York')]"/>
            <munit-tools:assert-that expression="#[payload.routeOptimization.destination]" is="#[MunitTools::equalTo('Boston')]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="test-get-route-optimization-with-params" description="Test route optimization with custom parameters">
        <munit:execution>
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/fleet-coordination/route-optimization">
                <http:query-params><![CDATA[#[output application/java
---
{
    "origin" : "Chicago",
    "destination" : "Detroit",
    "vehicleId" : "TRUCK_002"
}]]]></http:query-params>
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
            <munit-tools:assert-that expression="#[payload.routeOptimization.vehicleId]" is="#[MunitTools::equalTo('TRUCK_002')]"/>
            <munit-tools:assert-that expression="#[payload.routeOptimization.origin]" is="#[MunitTools::equalTo('Chicago')]"/>
            <munit-tools:assert-that expression="#[payload.routeOptimization.destination]" is="#[MunitTools::equalTo('Detroit')]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="test-route-optimization-structure" description="Test route optimization response structure">
        <munit:execution>
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/fleet-coordination/route-optimization">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
            
            <!-- Validate current route structure -->
            <munit-tools:assert-that expression="#[payload.routeOptimization.currentRoute.estimatedTime]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.routeOptimization.currentRoute.distance]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.routeOptimization.currentRoute.fuelEstimate]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.routeOptimization.currentRoute.riskScore]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.routeOptimization.currentRoute.environmentalFactors]" is="#[MunitTools::notNullValue()]"/>
            
            <!-- Validate alternative route structure -->
            <munit-tools:assert-that expression="#[payload.routeOptimization.alternativeRoute.recommended]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.routeOptimization.alternativeRoute.reason]" is="#[MunitTools::notNullValue()]"/>
            
            <!-- Validate recommendations -->
            <munit-tools:assert-that expression="#[payload.routeOptimization.recommendations]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[sizeOf(payload.routeOptimization.recommendations)]" is="#[MunitTools::greaterThan(0)]"/>
        </munit:validation>
    </munit:test>

    <!-- ========================================== -->
    <!-- Integration Tests -->
    <!-- ========================================== -->

    <munit:test name="test-coordination-dependencies" description="Test that coordination endpoints depend on both environmental and fleet data">
        <munit:behavior>
            <!-- Mock environmental data flow to verify it's called -->
            <munit-tools:mock-when processor="flow-ref">
                <munit-tools:with-attributes>
                    <munit-tools:with-attribute whereValue="get:\environmental-data:chainsync-platform-api-config" attributeName="name"/>
                </munit-tools:with-attributes>
                <munit-tools:then-return>
                    <munit-tools:payload value="#[{
                        data: [{
                            stationId: 'TEST_STATION',
                            city: 'Test City',
                            riskAssessment: { riskScore: 5 },
                            weather: { visibility: 8, windSpeed: 10 },
                            airQuality: { aqi: 100 }
                        }]
                    }]"/>
                </munit-tools:then-return>
            </munit-tools:mock-when>
            
            <!-- Mock fleet data flow to verify it's called -->
            <munit-tools:mock-when processor="flow-ref">
                <munit-tools:with-attributes>
                    <munit-tools:with-attribute whereValue="get:\fleet-monitoring:chainsync-platform-api-config" attributeName="name"/>
                </munit-tools:with-attributes>
                <munit-tools:then-return>
                    <munit-tools:payload value="#[{
                        data: [{
                            vehicleId: 'TEST_VEHICLE',
                            driverName: 'Test Driver',
                            coordinates: { latitude: 40.7, longitude: -74.0 },
                            driverMetrics: { hoursOnDuty: 7 }
                        }]
                    }]"/>
                </munit-tools:then-return>
            </munit-tools:mock-when>
        </munit:behavior>
        
        <munit:execution>
            <flow-ref name="get:\fleet-coordination\recommendations:chainsync-platform-api-config"/>
        </munit:execution>
        
        <munit:validation>
            <!-- Verify both data sources were called -->
            <munit-tools:verify-call processor="flow-ref">
                <munit-tools:with-attributes>
                    <munit-tools:with-attribute whereValue="get:\environmental-data:chainsync-platform-api-config" attributeName="name"/>
                </munit-tools:with-attributes>
            </munit-tools:verify-call>
            
            <munit-tools:verify-call processor="flow-ref">
                <munit-tools:with-attributes>
                    <munit-tools:with-attribute whereValue="get:\fleet-monitoring:chainsync-platform-api-config" attributeName="name"/>
                </munit-tools:with-attributes>
            </munit-tools:verify-call>
            
            <!-- Verify response structure -->
            <munit-tools:assert-that expression="#[payload.fleetCoordinationRecommendations]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.summary]" is="#[MunitTools::notNullValue()]"/>
        </munit:validation>
    </munit:test>

    <!-- ========================================== -->
    <!-- Business Logic Tests -->
    <!-- ========================================== -->

    <munit:test name="test-risk-score-calculation" description="Test risk score calculation logic">
        <munit:execution>
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/fleet-coordination/recommendations">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
            
            <!-- Verify that all vehicles have a risk assessment -->
            <ee:transform doc:name="Validate Risk Calculations">
                <ee:variables>
                    <ee:set-variable variableName="allVehicles">payload.fleetCoordinationRecommendations</ee:set-variable>
                </ee:variables>
            </ee:transform>
            
            <!-- Each vehicle should have environmental conditions and action priority -->
            <foreach collection="#[vars.allVehicles]">
                <munit-tools:assert-that expression="#[payload.environmentalConditions]" is="#[MunitTools::notNullValue()]"/>
                <munit-tools:assert-that expression="#[payload.actionPriority]" is="#[MunitTools::notNullValue()]"/>
                <munit-tools:assert-that expression="#[payload.actionPriority]" is="#[MunitTools::anyOf([
                    MunitTools::equalTo('IMMEDIATE'),
                    MunitTools::equalTo('HIGH'),
                    MunitTools::equalTo('MEDIUM'),
                    MunitTools::equalTo('LOW')
                ])]"/>
            </foreach>
        </munit:validation>
    </munit:test>

    <munit:test name="test-environmental-recommendations" description="Test environmental condition-based recommendations">
        <munit:execution>
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/fleet-coordination/recommendations">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
            
            <!-- Validate that environmental conditions influence recommendations -->
            <ee:transform doc:name="Check Environmental Influence">
                <ee:variables>
                    <ee:set-variable variableName="recommendations">payload.fleetCoordinationRecommendations</ee:set-variable>
                </ee:variables>
            </ee:transform>
            
            <!-- Each recommendation should have environmental factors considered -->
            <foreach collection="#[vars.recommendations]">
                <munit-tools:assert-that expression="#[payload.environmentalConditions.weather]" is="#[MunitTools::notNullValue()]"/>
                <munit-tools:assert-that expression="#[payload.environmentalConditions.airQuality]" is="#[MunitTools::notNullValue()]"/>
                <munit-tools:assert-that expression="#[payload.environmentalConditions.aqi]" is="#[MunitTools::notNullValue()]"/>
                <munit-tools:assert-that expression="#[payload.recommendations]" is="#[MunitTools::notNullValue()]"/>
            </foreach>
        </munit:validation>
    </munit:test>

    <!-- ========================================== -->
    <!-- Internal Flow Tests -->
    <!-- ========================================== -->

    <munit:test name="test-internal-coordination-flow" description="Test internal coordination flow">
        <munit:execution>
            <flow-ref name="get:\fleet-coordination\recommendations:chainsync-platform-api-config"/>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that expression="#[payload.fleetCoordinationRecommendations]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.summary]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.timestamp]" is="#[MunitTools::notNullValue()]"/>
        </munit:validation>
    </munit:test>

</mule>