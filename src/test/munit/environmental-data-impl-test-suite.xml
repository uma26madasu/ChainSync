<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xsi:schemaLocation="
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
        http://www.mulesoft.org/schema/mule/munit-tools http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
        http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">

    <!-- Environmental Data API Tests -->
    <munit:config name="environmental-data-impl-test-suite"/>

    <!-- Test Configuration -->
    <http:request-config name="testHttpRequestConfig">
        <http:request-connection host="localhost" port="8081"/>
    </http:request-config>

    <!-- ========================================== -->
    <!-- GET Environmental Data Tests -->
    <!-- ========================================== -->

    <munit:test name="test-get-environmental-data-success" description="Test successful retrieval of environmental data">
        <munit:behavior>
            <munit-tools:mock-when processor=".*">
                <!-- No mocking needed as we're testing the actual flow -->
            </munit-tools:mock-when>
        </munit:behavior>
        
        <munit:execution>
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/environmental-data">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
            <munit-tools:assert-that expression="#[payload.data]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[sizeOf(payload.data)]" is="#[MunitTools::greaterThan(0)]"/>
            <munit-tools:assert-that expression="#[payload.metadata.totalStations]" is="#[MunitTools::equalTo(6)]"/>
            
            <!-- Validate first station structure -->
            <munit-tools:assert-that expression="#[payload.data[0].stationId]" is="#[MunitTools::equalTo('NYC_CENTRAL_001')]"/>
            <munit-tools:assert-that expression="#[payload.data[0].city]" is="#[MunitTools::equalTo('New York')]"/>
            <munit-tools:assert-that expression="#[payload.data[0].airQuality.aqi]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.data[0].weather.temperature]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.data[0].riskAssessment.riskScore]" is="#[MunitTools::notNullValue()]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="test-get-environmental-data-with-filters" description="Test environmental data retrieval with query parameters">
        <munit:execution>
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/environmental-data">
                <http:query-params><![CDATA[#[output application/java
---
{
    "city" : "New York",
    "minRiskScore" : "3"
}]]]></http:query-params>
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
            <munit-tools:assert-that expression="#[payload.data]" is="#[MunitTools::notNullValue()]"/>
        </munit:validation>
    </munit:test>

    <!-- ========================================== -->
    <!-- GET Single Station Tests -->
    <!-- ========================================== -->

    <munit:test name="test-get-station-data-success" description="Test successful retrieval of single station data">
        <munit:execution>
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/environmental-data/NYC_CENTRAL_001">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
            <munit-tools:assert-that expression="#[payload.stationId]" is="#[MunitTools::equalTo('NYC_CENTRAL_001')]"/>
            <munit-tools:assert-that expression="#[payload.city]" is="#[MunitTools::equalTo('New York')]"/>
            <munit-tools:assert-that expression="#[payload.airQuality]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.weather]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.riskAssessment]" is="#[MunitTools::notNullValue()]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="test-get-station-data-not-found" description="Test 404 response for non-existent station">
        <munit:execution>
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/environmental-data/INVALID_STATION">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(404)]"/>
            <munit-tools:assert-that expression="#[payload.error.code]" is="#[MunitTools::equalTo('STATION_NOT_FOUND')]"/>
            <munit-tools:assert-that expression="#[payload.error.message]" is="#[MunitTools::containsString('INVALID_STATION')]"/>
        </munit:validation>
    </munit:test>

    <!-- ========================================== -->
    <!-- Emergency Alerts Tests -->
    <!-- ========================================== -->

    <munit:test name="test-get-emergency-alerts" description="Test retrieval of emergency alerts">
        <munit:execution>
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/emergency-alerts">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
            <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::notNullValue()]"/>
            <!-- Note: Emergency alerts endpoint needs to be implemented -->
        </munit:validation>
    </munit:test>

    <munit:test name="test-create-emergency-alert" description="Test creation of emergency alert">
        <munit:execution>
            <http:request config-ref="testHttpRequestConfig" method="POST" path="/api/emergency-alerts">
                <http:body><![CDATA[#[output application/json
---
{
    "stationId": "NYC_CENTRAL_001",
    "alertLevel": "CRITICAL",
    "triggerCondition": "Unusual pollution spike detected",
    "overrideReason": "Manual testing of emergency response"
}]]]></http:body>
                <http:headers><![CDATA[#[output application/java
---
{
    "Content-Type" : "application/json",
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::anyOf([MunitTools::equalTo(201), MunitTools::equalTo(200)])]"/>
            <!-- Note: POST endpoint needs to be implemented -->
        </munit:validation>
    </munit:test>

    <!-- ========================================== -->
    <!-- Internal Flow Tests -->
    <!-- ========================================== -->

    <munit:test name="test-internal-environmental-data-flow" description="Test internal environmental data flow">
        <munit:execution>
            <flow-ref name="get-environmental-data"/>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that expression="#[payload.data]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.metadata]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.data[0].stationId]" is="#[MunitTools::equalTo('NYC_CENTRAL_001')]"/>
        </munit:validation>
    </munit:test>

    <!-- ========================================== -->
    <!-- Error Handling Tests -->
    <!-- ========================================== -->

    <munit:test name="test-invalid-accept-header" description="Test invalid Accept header handling">
        <munit:execution>
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/environmental-data">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/xml"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(406)]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="test-invalid-http-method" description="Test invalid HTTP method handling">
        <munit:execution>
            <http:request config-ref="testHttpRequestConfig" method="DELETE" path="/api/environmental-data">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(405)]"/>
        </munit:validation>
    </munit:test>

    <!-- ========================================== -->
    <!-- Data Structure Validation Tests -->
    <!-- ========================================== -->

    <munit:test name="test-environmental-data-structure" description="Test environmental data response structure">
        <munit:execution>
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/environmental-data">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <!-- Validate top-level structure -->
            <munit-tools:assert-that expression="#[payload.data]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.metadata]" is="#[MunitTools::notNullValue()]"/>
            
            <!-- Validate first station data structure -->
            <ee:transform doc:name="Extract First Station">
                <ee:variables>
                    <ee:set-variable variableName="firstStation">payload.data[0]</ee:set-variable>
                </ee:variables>
            </ee:transform>
            
            <!-- Station basic info -->
            <munit-tools:assert-that expression="#[vars.firstStation.stationId]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[vars.firstStation.city]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[vars.firstStation.country]" is="#[MunitTools::notNullValue()]"/>
            
            <!-- Coordinates -->
            <munit-tools:assert-that expression="#[vars.firstStation.coordinates.latitude]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[vars.firstStation.coordinates.longitude]" is="#[MunitTools::notNullValue()]"/>
            
            <!-- Air Quality -->
            <munit-tools:assert-that expression="#[vars.firstStation.airQuality.aqi]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[vars.firstStation.airQuality.level]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[vars.firstStation.airQuality.pollutants]" is="#[MunitTools::notNullValue()]"/>
            
            <!-- Weather -->
            <munit-tools:assert-that expression="#[vars.firstStation.weather.temperature]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[vars.firstStation.weather.humidity]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[vars.firstStation.weather.condition]" is="#[MunitTools::notNullValue()]"/>
            
            <!-- Risk Assessment -->
            <munit-tools:assert-that expression="#[vars.firstStation.riskAssessment.riskScore]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[vars.firstStation.riskAssessment.emergencyLevel]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[vars.firstStation.riskAssessment.coordinationRequired]" is="#[MunitTools::notNullValue()]"/>
        </munit:validation>
    </munit:test>

    <!-- ========================================== -->
    <!-- Performance Tests -->
    <!-- ========================================== -->

    <munit:test name="test-response-time" description="Test API response time performance">
        <munit:execution>
            <ee:transform doc:name="Record Start Time">
                <ee:variables>
                    <ee:set-variable variableName="startTime">now()</ee:set-variable>
                </ee:variables>
            </ee:transform>
            
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/environmental-data">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
            
            <ee:transform doc:name="Calculate Response Time">
                <ee:variables>
                    <ee:set-variable variableName="endTime">now()</ee:set-variable>
                    <ee:set-variable variableName="responseTime">(vars.endTime - vars.startTime)</ee:set-variable>
                </ee:variables>
            </ee:transform>
        </munit:execution>
        
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
            <!-- Assert response time is less than 5 seconds (5000 milliseconds) -->
            <munit-tools:assert-that expression="#[vars.responseTime as Number]" is="#[MunitTools::lessThan(5000)]"/>
        </munit:validation>
    </munit:test>

</mule>