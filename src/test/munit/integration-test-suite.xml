<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xsi:schemaLocation="
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
        http://www.mulesoft.org/schema/mule/munit-tools http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
        http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">

    <!-- End-to-End Integration Test Suite -->
    <munit:config name="integration-test-suite"/>

    <!-- Test Configuration -->
    <http:request-config name="testHttpRequestConfig">
        <http:request-connection host="localhost" port="8081"/>
    </http:request-config>

    <!-- ========================================== -->
    <!-- Complete API Workflow Tests -->
    <!-- ========================================== -->

    <munit:test name="test-complete-api-workflow" description="Test complete API workflow from environmental data to fleet coordination">
        <munit:execution>
            <!-- Step 1: Get Environmental Data -->
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/environmental-data">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
            
            <ee:transform doc:name="Store Environmental Data">
                <ee:variables>
                    <ee:set-variable variableName="envData">payload</ee:set-variable>
                </ee:variables>
            </ee:transform>
            
            <!-- Step 2: Get Fleet Monitoring Data -->
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/fleet-monitoring">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
            
            <ee:transform doc:name="Store Fleet Data">
                <ee:variables>
                    <ee:set-variable variableName="fleetData">payload</ee:set-variable>
                </ee:variables>
            </ee:transform>
            
            <!-- Step 3: Get Fleet Coordination Recommendations -->
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/fleet-coordination/recommendations">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
            
            <ee:transform doc:name="Store Coordination Data">
                <ee:variables>
                    <ee:set-variable variableName="coordinationData">payload</ee:set-variable>
                </ee:variables>
            </ee:transform>
            
            <!-- Step 4: Get Enhanced Fleet Monitoring -->
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/fleet-monitoring/enhanced">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
            
            <ee:transform doc:name="Store Enhanced Data">
                <ee:variables>
                    <ee:set-variable variableName="enhancedData">payload</ee:set-variable>
                </ee:variables>
            </ee:transform>
        </munit:execution>
        
        <munit:validation>
            <!-- Validate Environmental Data -->
            <munit-tools:assert-that expression="#[vars.envData.data]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[sizeOf(vars.envData.data)]" is="#[MunitTools::greaterThan(0)]"/>
            
            <!-- Validate Fleet Data -->
            <munit-tools:assert-that expression="#[vars.fleetData.data]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[sizeOf(vars.fleetData.data)]" is="#[MunitTools::greaterThan(0)]"/>
            
            <!-- Validate Coordination Integration -->
            <munit-tools:assert-that expression="#[vars.coordinationData.fleetCoordinationRecommendations]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[sizeOf(vars.coordinationData.fleetCoordinationRecommendations)]" is="#[MunitTools::greaterThan(0)]"/>
            
            <!-- Validate Enhanced Data Integration -->
            <munit-tools:assert-that expression="#[vars.enhancedData.data[0].environmentalContext]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[vars.enhancedData.data[0].enhancedRiskAssessment]" is="#[MunitTools::notNullValue()]"/>
            
            <!-- Validate Data Consistency -->
            <munit-tools:assert-that expression="#[sizeOf(vars.envData.data)]" is="#[MunitTools::equalTo(6)]"/>
            <munit-tools:assert-that expression="#[vars.fleetData.metadata.totalVehicles]" is="#[MunitTools::greaterThan(0)]"/>
        </munit:validation>
    </munit:test>

    <!-- ========================================== -->
    <!-- Cross-Endpoint Data Consistency Tests -->
    <!-- ========================================== -->

    <munit:test name="test-data-consistency-across-endpoints" description="Test data consistency between environmental and fleet endpoints">
        <munit:execution>
            <!-- Get Environmental Data -->
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/environmental-data">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
            
            <ee:transform doc:name="Extract Station Count">
                <ee:variables>
                    <ee:set-variable variableName="stationCount">payload.metadata.totalStations</ee:set-variable>
                    <ee:set-variable variableName="envStations">payload.data map $.stationId</ee:set-variable>
                </ee:variables>
            </ee:transform>
            
            <!-- Get Fleet Coordination that uses environmental data -->
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/fleet-coordination/recommendations">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
            
            <ee:transform doc:name="Extract Coordination Environmental References">
                <ee:variables>
                    <ee:set-variable variableName="coordinationWeatherConditions">
                        payload.fleetCoordinationRecommendations map $.environmentalConditions.weather
                    </ee:set-variable>
                </ee:variables>
            </ee:transform>
        </munit:execution>
        
        <munit:validation>
            <!-- Validate that coordination uses environmental data -->
            <munit-tools:assert-that expression="#[vars.stationCount]" is="#[MunitTools::equalTo(6)]"/>
            <munit-tools:assert-that expression="#[sizeOf(vars.envStations)]" is="#[MunitTools::equalTo(6)]"/>
            <munit-tools:assert-that expression="#[sizeOf(vars.coordinationWeatherConditions)]" is="#[MunitTools::greaterThan(0)]"/>
            
            <!-- Validate all coordination recommendations have environmental context -->
            <foreach collection="#[vars.coordinationWeatherConditions]">
                <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::notNullValue()]"/>
            </foreach>
        </munit:validation>
    </munit:test>

    <!-- ========================================== -->
    <!-- Performance Integration Tests -->
    <!-- ========================================== -->

    <munit:test name="test-api-performance-under-load" description="Test API performance with multiple concurrent requests">
        <munit:execution>
            <ee:transform doc:name="Record Start Time">
                <ee:variables>
                    <ee:set-variable variableName="startTime">now()</ee:set-variable>
                </ee:variables>
            </ee:transform>
            
            <!-- Simulate multiple concurrent requests -->
            <parallel-foreach collection="#[1 to 3]">
                <choice>
                    <when expression="#[payload == 1]">
                        <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/environmental-data">
                            <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
                        </http:request>
                    </when>
                    <when expression="#[payload == 2]">
                        <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/fleet-monitoring">
                            <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
                        </http:request>
                    </when>
                    <otherwise>
                        <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/fleet-coordination/recommendations">
                            <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
                        </http:request>
                    </otherwise>
                </choice>
            </parallel-foreach>
            
            <ee:transform doc:name="Calculate Total Time">
                <ee:variables>
                    <ee:set-variable variableName="endTime">now()</ee:set-variable>
                    <ee:set-variable variableName="totalTime">(vars.endTime - vars.startTime)</ee:set-variable>
                </ee:variables>
            </ee:transform>
        </munit:execution>
        
        <munit:validation>
            <!-- Validate all requests completed successfully -->
            <munit-tools:assert-that expression="#[sizeOf(payload)]" is="#[MunitTools::equalTo(3)]"/>
            
            <!-- Validate reasonable performance (less than 15 seconds for all requests) -->
            <munit-tools:assert-that expression="#[vars.totalTime as Number]" is="#[MunitTools::lessThan(15000)]"/>
            
            <!-- Validate each response is not null -->
            <foreach collection="#[payload]">
                <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::notNullValue()]"/>
            </foreach>
        </munit:validation>
    </munit:test>

    <!-- ========================================== -->
    <!-- Error Recovery Integration Tests -->
    <!-- ========================================== -->

    <munit:test name="test-error-recovery-workflow" description="Test error recovery in integrated workflows">
        <munit:execution>
            <!-- Test non-existent station, then valid data -->
            <try>
                <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/environmental-data/INVALID_STATION">
                    <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
                </http:request>
                <error-handler>
                    <on-error-continue>
                        <set-variable variableName="errorReceived" value="true"/>
                    </on-error-continue>
                </error-handler>
            </try>
            
            <!-- Then test valid endpoint -->
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/environmental-data">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <!-- Validate error was handled and system recovered -->
            <munit-tools:assert-that expression="#[vars.errorReceived default false]" is="#[MunitTools::equalTo(true)]"/>
            <munit-tools:assert-that expression="#[payload.data]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[sizeOf(payload.data)]" is="#[MunitTools::greaterThan(0)]"/>
        </munit:validation>
    </munit:test>

    <!-- ========================================== -->
    <!-- Alert Workflow Integration Tests -->
    <!-- ========================================== -->

    <munit:test name="test-alert-creation-workflow" description="Test complete alert creation and retrieval workflow">
        <munit:execution>
            <!-- Step 1: Get current fleet alerts -->
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/fleet-alerts">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
            
            <ee:transform doc:name="Store Initial Alert Count">
                <ee:variables>
                    <ee:set-variable variableName="initialAlertCount">payload.summary.totalAlerts</ee:set-variable>
                </ee:variables>
            </ee:transform>
            
            <!-- Step 2: Create a new fleet alert -->
            <http:request config-ref="testHttpRequestConfig" method="POST" path="/api/fleet-alerts">
                <http:body><![CDATA[#[output application/json
---
{
    "vehicleId": "TRUCK_TEST_001",
    "driverId": "D_TEST_001",
    "alertType": "SAFETY",
    "alertLevel": "HIGH",
    "triggerCondition": "Integration test alert",
    "location": "Test Location"
}]]]></http:body>
                <http:headers><![CDATA[#[output application/java
---
{
    "Content-Type" : "application/json",
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
            
            <ee:transform doc:name="Store Alert Creation Response">
                <ee:variables>
                    <ee:set-variable variableName="alertCreationResponse">payload</ee:set-variable>
                </ee:variables>
            </ee:transform>
            
            <!-- Step 3: Get alerts again to verify creation -->
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/fleet-alerts">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <!-- Validate alert creation response -->
            <munit-tools:assert-that expression="#[vars.alertCreationResponse.message]" is="#[MunitTools::containsString('created successfully')]"/>
            <munit-tools:assert-that expression="#[vars.alertCreationResponse.alertId]" is="#[MunitTools::notNullValue()]"/>
            
            <!-- Validate alert listing still works -->
            <munit-tools:assert-that expression="#[payload.alerts]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.summary.totalAlerts]" is="#[MunitTools::greaterThanOrEqualTo(vars.initialAlertCount)]"/>
        </munit:validation>
    </munit:test>

    <!-- ========================================== -->
    <!-- System Health Integration Tests -->
    <!-- ========================================== -->

    <munit:test name="test-system-health-after-operations" description="Test system health after performing various operations">
        <munit:execution>
            <!-- Perform various operations -->
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/environmental-data">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
            
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/fleet-monitoring">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
            
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/driver-performance">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
            
            <!-- Check system health -->
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/health">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <!-- Validate health check shows system is functioning -->
            <munit-tools:assert-that expression="#[payload.status]" is="#[MunitTools::anyOf([
                MunitTools::equalTo('healthy'),
                MunitTools::equalTo('degraded')
            ])]"/>
            <munit-tools:assert-that expression="#[payload.service]" is="#[MunitTools::containsString('ChainSync')]"/>
        </munit:validation>
    </munit:test>

    <!-- ========================================== -->
    <!-- Data Quality Integration Tests -->
    <!-- ========================================== -->

    <munit:test name="test-data-quality-across-system" description="Test data quality and consistency across all endpoints">
        <munit:execution>
            <!-- Get all endpoint data -->
            <parallel-foreach collection="#[['environmental-data', 'fleet-monitoring', 'driver-performance', 'fleet-alerts']]">
                <http:request config-ref="testHttpRequestConfig" method="GET" path="#['/api/' ++ payload]">
                    <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
                </http:request>
            </parallel-foreach>
        </munit:execution>
        
        <munit:validation>
            <!-- Validate all endpoints returned data -->
            <munit-tools:assert-that expression="#[sizeOf(payload)]" is="#[MunitTools::equalTo(4)]"/>
            
            <!-- Validate each response has required structure -->
            <foreach collection="#[payload]">
                <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::notNullValue()]"/>
                
                <!-- Each response should have either 'data' or specific structure -->
                <choice>
                    <when expression="#[payload.data?]">
                        <munit-tools:assert-that expression="#[payload.data]" is="#[MunitTools::notNullValue()]"/>
                    </when>
                    <when expression="#[payload.alerts?]">
                        <munit-tools:assert-that expression="#[payload.alerts]" is="#[MunitTools::notNullValue()]"/>
                    </when>
                    <when expression="#[payload.driverPerformance?]">
                        <munit-tools:assert-that expression="#[payload.driverPerformance]" is="#[MunitTools::notNullValue()]"/>
                    </when>
                </choice>
            </foreach>
        </munit:validation>
    </munit:test>

    <!-- ========================================== -->
    <!-- Configuration and Environment Tests -->
    <!-- ========================================== -->

    <munit:test name="test-configuration-values" description="Test that configuration values are properly loaded">
        <munit:execution>
            <!-- Test health endpoint to verify configuration is working -->
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/health">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <!-- Validate health endpoint works (indicating configuration is loaded) -->
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
            
            <!-- Validate basic configuration values are reflected in response -->
            <munit-tools:assert-that expression="#[payload.service]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.version]" is="#[MunitTools::notNullValue()]"/>
        </munit:validation>
    </munit:test>

    <!-- ========================================== -->
    <!-- End-to-End Scenario Tests -->
    <!-- ========================================== -->

    <munit:test name="test-emergency-coordination-scenario" description="Test complete emergency coordination scenario">
        <munit:execution>
            <!-- Scenario: High-risk environmental conditions affecting fleet operations -->
            
            <!-- Step 1: Check environmental conditions -->
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/environmental-data">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
            
            <ee:transform doc:name="Identify High Risk Stations">
                <ee:variables>
                    <ee:set-variable variableName="highRiskStations">
                        payload.data filter ($.riskAssessment.riskScore >= 7)
                    </ee:set-variable>
                </ee:variables>
            </ee:transform>
            
            <!-- Step 2: Check fleet status -->
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/fleet-monitoring">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
            
            <ee:transform doc:name="Store Fleet Status">
                <ee:variables>
                    <ee:set-variable variableName="fleetStatus">payload</ee:set-variable>
                </ee:variables>
            </ee:transform>
            
            <!-- Step 3: Get coordination recommendations -->
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/fleet-coordination/recommendations">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
            
            <ee:transform doc:name="Store Recommendations">
                <ee:variables>
                    <ee:set-variable variableName="recommendations">payload</ee:set-variable>
                </ee:variables>
            </ee:transform>
            
            <!-- Step 4: Check driver safety alerts -->
            <http:request config-ref="testHttpRequestConfig" method="GET" path="/api/fleet-coordination/driver-safety-alerts">
                <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        
        <munit:validation>
            <!-- Validate emergency scenario data flow -->
            <munit-tools:assert-that expression="#[vars.highRiskStations]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[vars.fleetStatus.data]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[vars.recommendations.fleetCoordinationRecommendations]" is="#[MunitTools::notNullValue()]"/>
            <munit-tools:assert-that expression="#[payload.driverSafetyAlerts]" is="#[MunitTools::notNullValue()]"/>
            
            <!-- Validate coordination recommendations exist when needed -->
            <munit-tools:assert-that expression="#[vars.recommendations.summary.totalVehicles]" is="#[MunitTools::greaterThan(0)]"/>
            
            <!-- Validate safety alerts structure -->
            <munit-tools:assert-that expression="#[payload.summary.totalActiveDrivers]" is="#[MunitTools::greaterThanOrEqualTo(0)]"/>
        </munit:validation>
    </munit:test>

    <!-- ========================================== -->
    <!-- API Versioning Integration Tests -->
    <!-- ========================================== -->

    <munit:test name="test-api-versioning-consistency" description="Test API versioning consistency across endpoints">
        <munit:execution>
            <parallel-foreach collection="#[['environmental-data', 'fleet-monitoring', 'health']]">
                <http:request config-ref="testHttpRequestConfig" method="GET" path="#['/api/' ++ payload]">
                    <http:headers><![CDATA[#[output application/java
---
{
    "Accept" : "application/json",
    "User-Agent" : "ChainSync-Integration-Test/1.0"
}]]]></http:headers>
                </http:request>
            </parallel-foreach>
        </munit:execution>
        
        <munit:validation>
            <!-- Validate all endpoints respond successfully -->
            <munit-tools:assert-that expression="#[sizeOf(payload)]" is="#[MunitTools::equalTo(3)]"/>
            
            <!-- All responses should be successful -->
            <foreach collection="#[payload]">
                <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::notNullValue()]"/>
            </foreach>
        </munit:validation>
    </munit:test>

</mule>