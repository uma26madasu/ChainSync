<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">

    <!-- Main Fleet Coordination Recommendations Flow -->
    <flow name="get:\fleet-coordination\recommendations:chainsync-platform-api-config" doc:name="Get Fleet Coordination Recommendations">
        <scatter-gather>
            <route>
                <flow-ref name="get:\environmental-data:chainsync-platform-api-config" doc:name="Get Environmental Data"/>
            </route>
            <route>
                <flow-ref name="get:\fleet-monitoring:chainsync-platform-api-config" doc:name="Get Fleet Data"/>
            </route>
        </scatter-gather>
        
        <ee:transform>
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
var envData = payload[0].payload.data
var fleetData = payload[1].payload.data

// Inline helper functions
fun findNearestStation(lat: Number, lon: Number) =
    (envData map ((station) -> {
        station: station,
        distance: sqrt(pow(station.coordinates.latitude - lat, 2) + pow(station.coordinates.longitude - lon, 2))
    }) orderBy $.distance)[0].station

fun generateSimpleRecommendations(vehicle, env) = []
    ++ (if (env.weather.visibility < 5) ["Reduce speed due to low visibility"] else [])
    ++ (if (env.airQuality.aqi > 150) ["Use air filtration - AQI " ++ env.airQuality.aqi as String] else [])
    ++ (if (env.weather.windSpeed > 20) ["High wind alert"] else [])

fun calculateActionPriority(vehicle, env) =
    if (env.riskAssessment.riskScore >= 7 or vehicle.driverMetrics.hoursOnDuty > 10) "IMMEDIATE"
    else if (env.riskAssessment.riskScore >= 5 or vehicle.driverMetrics.hoursOnDuty > 8) "HIGH"
    else if (env.riskAssessment.riskScore >= 3) "MEDIUM"
    else "LOW"

---
{
    timestamp: now() as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"},
    fleetCoordinationRecommendations: fleetData map ((vehicle) -> do {
        var nearest = findNearestStation(vehicle.coordinates.latitude, vehicle.coordinates.longitude)
        ---
        {
            vehicleId: vehicle.vehicleId,
            driverName: vehicle.driverName,
            currentLocation: vehicle.location,
            environmentalConditions: {
                weather: nearest.weather.condition,
                temperature: nearest.weather.temperature,
                visibility: nearest.weather.visibility,
                airQuality: nearest.airQuality.level,
                aqi: nearest.airQuality.aqi
            },
            recommendations: generateSimpleRecommendations(vehicle, nearest),
            actionPriority: calculateActionPriority(vehicle, nearest)
        }
    }),
    summary: {
        totalVehicles: sizeOf(fleetData),
        vehiclesInRiskAreas: sizeOf(fleetData filter ((v) ->
            (findNearestStation(v.coordinates.latitude, v.coordinates.longitude).riskAssessment.riskScore >= 5)
        )),
        immediateActionRequired: sizeOf(fleetData filter ((v) ->
            calculateActionPriority(v, findNearestStation(v.coordinates.latitude, v.coordinates.longitude)) == "IMMEDIATE"
        )),
        weatherAdvisories: sizeOf(envData filter ($.weather.visibility < 10 or $.weather.windSpeed > 15)),
        airQualityAlerts: sizeOf(envData filter ($.airQuality.aqi > 100))
    }
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>

</mule>