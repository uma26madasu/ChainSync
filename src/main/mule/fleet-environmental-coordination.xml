<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">

    <configuration doc:name="Fleet Coordination Functions">
        <expression-language>
            <global-functions><![CDATA[
fun generateReroutingSuggestions(fleetData, envData) =
    envData
        filter ($.riskAssessment.riskScore > 6)
        map ((station) -> {
            affectedArea: station.city,
            riskLevel: station.riskAssessment.emergencyLevel,
            suggestion: "Reroute vehicles away from " ++ station.city,
            affectedVehicles: sizeOf(fleetData filter ($.location == station.city))
        })

fun generateSchedulingAdjustments(fleetData, envData) =
    {
        delayDepartures: sizeOf(envData filter ($.weather.visibility < 5)),
        extendDeliveryWindows: sizeOf(envData filter ($.riskAssessment.riskScore > 5)),
        prioritizeRegions: (envData filter ($.riskAssessment.riskScore < 3) map $.city)
    }

fun generateFleetWideAlerts(envData) =
    (envData filter ($.riskAssessment.riskScore > 5) map ((station) -> {
        region: station.city,
        alert: "Environmental hazard in " ++ station.city ++ " - Risk Level: " ++ station.riskAssessment.emergencyLevel,
        validUntil: (now() + |PT6H|) as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"}
    }))

fun calculateOptimalDepartureTime(envData) = do {
    var currentHour = now() as String {format: "HH"} as Number
    var optimalHour = if (envData some ($.weather.visibility < 10))
                      (currentHour + 3) mod 24
                      else currentHour
    ---
    now() + ("PT" ++ (optimalHour - currentHour) ++ "H") as Period
}

fun identifyFavorableWindows(envData) =
    [{
        start: now(),
        end: now() + |PT2H|,
        conditions: "Current conditions acceptable"
    }]
            ]]></global-functions>
        </expression-language>
    </configuration>

    <flow name="get-fleet-coordination-recommendations" doc:id="b0a6470d-6215-4994-b587-13e1e3831ec6">
        <flow-ref name="get:\environmental-data:chainsync-platform-api-config" doc:id="948e86fe-fc11-4e43-ab64-43af499096bc"/>
        <ee:transform>
            <ee:variables>
                <ee:set-variable variableName="environmentalData"><![CDATA[#[payload]]]></ee:set-variable>
            </ee:variables>
        </ee:transform>
        <flow-ref name="get:\fleet-monitoring:chainsync-platform-api-config" doc:id="50751ba5-0591-4395-93c8-15b085637db8"/>
        <ee:transform>
            <ee:variables>
                <ee:set-variable variableName="fleetData"><![CDATA[#[payload]]]></ee:set-variable>
            </ee:variables>
        </ee:transform>
        <ee:transform>
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
var envData = vars.environmentalData.data
var fleetData = vars.fleetData.data

// Added type definitions for lat and lon
fun findNearestStation(lat: Number, lon: Number) =
    (envData map ((station) -> {
        station: station,
        distance: sqrt(pow(station.coordinates.latitude - lat, 2) + pow(station.coordinates.longitude - lon, 2))
    }) orderBy $.distance)[0].station

fun generateRecommendations(vehicle, env) =
    []
    ++ (if (env.weather.visibility < 5) ["Reduce speed due to low visibility"] else [])
    ++ (if (env.airQuality.aqi > 150) ["Use air filtration - AQI " ++ env.airQuality.aqi as String] else [])
    ++ (if (env.weather.windSpeed > 20) ["High wind alert"] else [])
    ++ (if (vehicle.driverMetrics.hoursOnDuty > 7 and env.weather.visibility < 10) ["Take break - long duty + low visibility"] else [])
    ++ (if (vehicle.vehicleHealth.fuelLevel < 25 and env.weather.condition != "Clear") ["Refuel soon due to weather"] else [])
    ++ (if (env.weather.temperature > 35) ["Monitor engine - high temp"] else [])
    ++ (if (env.weather.temperature < 0) ["Check tire pressure - cold weather"] else [])

fun identifyRiskFactors(vehicle, env) = {
    environmental: []
        ++ (if (env.weather.visibility < 5) ["Low visibility"] else [])
        ++ (if (env.airQuality.aqi > 150) ["Poor air quality"] else [])
        ++ (if (env.weather.windSpeed > 20) ["High winds"] else [])
        ++ (if (env.weather.temperature > 35 or env.weather.temperature < 0) ["Extreme temperature"] else []),
    vehicle: []
        ++ (if (vehicle.vehicleHealth.fuelLevel < 25) ["Low fuel"] else [])
        ++ (if (vehicle.vehicleHealth.maintenanceStatus != "CURRENT") ["Maintenance due"] else []),
    driver: []
        ++ (if (vehicle.driverMetrics.hoursOnDuty > 8) ["Extended driving hours"] else [])
        ++ (if (vehicle.driverMetrics.speedingViolations > 0) ["Recent speeding"] else [])
}

fun calculateActionPriority(vehicle, env) =
    if (env.riskAssessment.riskScore >= 7 or vehicle.driverMetrics.hoursOnDuty > 10) "IMMEDIATE"
    else if (env.riskAssessment.riskScore >= 5 or vehicle.driverMetrics.hoursOnDuty > 8) "HIGH"
    else if (env.riskAssessment.riskScore >= 3) "MEDIUM"
    else "LOW"

fun generateVehicleRecommendations(vehicle) = do {
    var nearest = findNearestStation(vehicle.coordinates.latitude, vehicle.coordinates.longitude)
    ---
    {
        vehicleId: vehicle.vehicleId,
        driverName: vehicle.driverName,
        currentLocation: vehicle.location,
        environmentalConditions: {
            weather: nearest.weather.condition,
            temperature: nearest.weather.temperature,
            visibility: nearest.weather.visibility,
            airQuality: nearest.airQuality.level,
            aqi: nearest.airQuality.aqi
        },
        recommendations: generateRecommendations(vehicle, nearest),
        riskFactors: identifyRiskFactors(vehicle, nearest),
        actionPriority: calculateActionPriority(vehicle, nearest)
    }
}

---
{
    timestamp: now() as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"},
    fleetCoordinationRecommendations: fleetData map generateVehicleRecommendations($),
    summary: {
        totalVehicles: sizeOf(fleetData),
        vehiclesInRiskAreas: sizeOf(fleetData filter ((v) ->
            (findNearestStation(v.coordinates.latitude, v.coordinates.longitude).riskAssessment.riskScore >= 5)
        )),
        immediateActionRequired: sizeOf(fleetData filter ((v) ->
            calculateActionPriority(v, findNearestStation(v.coordinates.latitude, v.coordinates.longitude)) == "IMMEDIATE"
        )),
        weatherAdvisories: sizeOf(envData filter ($.weather.visibility < 10 or $.weather.windSpeed > 15)),
        airQualityAlerts: sizeOf(envData filter ($.airQuality.aqi > 100))
    },
    coordinationActions: {
        rerouting: generateReroutingSuggestions(fleetData, envData),
        scheduling: generateSchedulingAdjustments(fleetData, envData),
        alerts: generateFleetWideAlerts(envData)
    }
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>

    <flow name="get-fleet-coordination-route-optimization">
        <ee:transform>
            <ee:variables>
                <ee:set-variable variableName="origin"><![CDATA[#[attributes.queryParams.origin default "New York"]]]></ee:set-variable>
                <ee:set-variable variableName="destination"><![CDATA[#[attributes.queryParams.destination default "Boston"]]]></ee:set-variable>
                <ee:set-variable variableName="vehicleId"><![CDATA[#[attributes.queryParams.vehicleId default "TRUCK_001"]]]></ee:set-variable>
            </ee:variables>
        </ee:transform>
        <flow-ref name="get:\environmental-data\(stationId):chainsync-platform-api-config" doc:id="00ea18b7-8a93-46da-b84a-4de332c4e135"/>
        <ee:transform>
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
var envData = payload.data

fun assessRouteRisk(stations) = avg(stations map $.riskAssessment.riskScore)

// Added type definitions for origin, destination, and stations
fun findAlternativeRoute(origin: String, destination: String, stations: Array) =
    if (stations some ($.riskAssessment.riskScore > 7))
        { recommended: true, reason: "Severe environmental conditions detected" }
    else
        { recommended: false, reason: "Current route acceptable" }

---
{
    routeOptimization: {
        vehicleId: vars.vehicleId,
        origin: vars.origin,
        destination: vars.destination,
        timestamp: now() as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"},
        currentRoute: {
            estimatedTime: "4 hours 30 minutes",
            distance: "350 km",
            fuelEstimate: "45 liters",
            riskScore: assessRouteRisk(envData),
            environmentalFactors: envData map ((station) -> {
                location: station.city,
                conditions: {
                    weather: station.weather.condition,
                    visibility: station.weather.visibility as String ++ " km",
                    airQuality: station.airQuality.level,
                    risk: station.riskAssessment.emergencyLevel
                }
            })
        },
        alternativeRoute: findAlternativeRoute(vars.origin, vars.destination, envData),
        recommendations: [
            "Monitor weather in " ++ (envData filter ($.weather.visibility < 10) map $.city joinBy ", "),
            "Plan refueling stops in cleaner areas",
            "Schedule breaks during good weather windows"
        ] filter ($ != "Monitor weather in "),
        slotifyIntegration: {
            enabled: true,
            suggestedDepartureTime: calculateOptimalDepartureTime(envData),
            weatherWindows: identifyFavorableWindows(envData)
        }
    }
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>

    <flow name="get-fleet-coordination-driver-safety-alerts" doc:id="8747a81f-2d6c-4bbc-a43d-aa77d1b6a571">
        <scatter-gather>
            <route>
                <flow-ref name="get-fleet-coordination-driver-safety-alerts" doc:id="65dc57ce-2c7b-4617-8224-771c3131036e"/>
            </route>
            <route>
                <flow-ref name="get-fleet-coordination-recommendations" doc:id="f9c4b74b-244b-457a-94fe-b9984c7b3e1e"/>
            </route>
        </scatter-gather>
        <ee:transform>
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
var envData = payload[0].payload.data
var fleetData = payload[1].payload.data

fun generateDriverAlert(vehicle, environmentalCondition) = {
    driverId: vehicle.driverId,
    driverName: vehicle.driverName,
    vehicleId: vehicle.vehicleId,
    currentLocation: vehicle.location,
    alertLevel: if (environmentalCondition.riskScore > 7) "CRITICAL"
                else if (environmentalCondition.riskScore > 5) "HIGH"
                else "MEDIUM",
    safetyAlerts: []
        ++ (if (environmentalCondition.visibility < 3) [{
            alertType: "VISIBILITY",
            severity: "HIGH",
            message: "Low visibility: " ++ environmentalCondition.visibility as String ++ " km",
            action: "STOP_WHEN_SAFE"
        }] else [])
        ++ (if (environmentalCondition.aqi > 200) [{
            alertType: "AIR_QUALITY",
            severity: "HIGH",
            message: "Hazardous AQI: " ++ environmentalCondition.aqi as String,
            action: "ACTIVATE_CABIN_FILTER"
        }] else [])
        ++ (if (vehicle.driverMetrics.hoursOnDuty > 8 and environmentalCondition.riskScore > 5) [{
            alertType: "FATIGUE",
            severity: "CRITICAL",
            message: "Long hours + poor conditions",
            action: "MANDATORY_REST"
        }] else []),
    coordinationRequired: environmentalCondition.riskScore > 5 or vehicle.driverMetrics.hoursOnDuty > 9,
    suggestedActions: {
        immediate: if (environmentalCondition.riskScore > 7) "Find safe stopping location" else "Continue with caution",
        shortTerm: "Monitor conditions",
        communication: "Check in every 30 mins"
    }
}

---
{
    driverSafetyAlerts: fleetData flatMap ((vehicle) ->
        envData
            filter ($.riskAssessment.riskScore > 3)
            map ((env) -> generateDriverAlert(vehicle, {
                visibility: env.weather.visibility,
                aqi: env.airQuality.aqi,
                riskScore: env.riskAssessment.riskScore,
                location: env.city
            }))
    ),
    summary: {
        totalActiveDrivers: sizeOf(fleetData),
        criticalAlerts: sizeOf(envData filter ($.riskAssessment.riskScore > 7)),
        recommendedActions: {
            immediateStops: sizeOf(envData filter ($.weather.visibility < 3)),
            routeDiversions: sizeOf(envData filter ($.riskAssessment.riskScore > 7)),
            restBreaks: sizeOf(fleetData filter ($.driverMetrics.hoursOnDuty > 8))
        }
    },
    timestamp: now() as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"}
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>
</mule>