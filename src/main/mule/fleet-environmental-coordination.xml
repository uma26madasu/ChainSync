<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">

    <!-- Enhanced Driver Safety Alerts Flow -->
    <flow name="get:\fleet-coordination\driver-safety-alerts:chainsync-platform-api-config" doc:name="Get Driver Safety Alerts">
        <scatter-gather>
            <route>
                <flow-ref name="get:\environmental-data:chainsync-platform-api-config" doc:name="Get Environmental Data"/>
            </route>
            <route>
                <flow-ref name="get:\fleet-monitoring:chainsync-platform-api-config" doc:name="Get Fleet Data"/>
            </route>
        </scatter-gather>
        
        <ee:transform>
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
var envData = payload[0].payload.data
var fleetData = payload[1].payload.data

// Inline function for generating driver alerts
fun generateDriverAlert(vehicle, envCondition) = {
    driverId: vehicle.driverId,
    driverName: vehicle.driverName,
    vehicleId: vehicle.vehicleId,
    currentLocation: vehicle.location,
    alertLevel: if (envCondition.riskScore > 7) "CRITICAL"
                else if (envCondition.riskScore > 5) "HIGH"
                else "MEDIUM",
    safetyAlerts: []
        ++ (if (envCondition.visibility < 3) [{
            alertType: "VISIBILITY",
            severity: "HIGH",
            message: "Low visibility: " ++ envCondition.visibility as String ++ " km",
            action: "STOP_WHEN_SAFE"
        }] else [])
        ++ (if (envCondition.aqi > 200) [{
            alertType: "AIR_QUALITY",
            severity: "HIGH",
            message: "Hazardous AQI: " ++ envCondition.aqi as String,
            action: "ACTIVATE_CABIN_FILTER"
        }] else []),
    coordinationRequired: envCondition.riskScore > 5 or vehicle.driverMetrics.hoursOnDuty > 9,
    suggestedActions: {
        immediate: if (envCondition.riskScore > 7) "Find safe stopping location" else "Continue with caution",
        shortTerm: "Monitor conditions",
        communication: "Check in every 30 mins"
    }
}

---
{
    driverSafetyAlerts: fleetData flatMap ((vehicle) ->
        envData
            filter ($.riskAssessment.riskScore > 3)
            map ((env) -> generateDriverAlert(vehicle, {
                visibility: env.weather.visibility,
                aqi: env.airQuality.aqi,
                riskScore: env.riskAssessment.riskScore,
                location: env.city
            }))
    ),
    summary: {
        totalActiveDrivers: sizeOf(fleetData),
        criticalAlerts: sizeOf(envData filter ($.riskAssessment.riskScore > 7)),
        recommendedActions: {
            immediateStops: sizeOf(envData filter ($.weather.visibility < 3)),
            routeDiversions: sizeOf(envData filter ($.riskAssessment.riskScore > 7)),
            restBreaks: sizeOf(fleetData filter ($.driverMetrics.hoursOnDuty > 8))
        }
    },
    timestamp: now() as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"}
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>

    <!-- Route Optimization Flow -->
    <flow name="get:\fleet-coordination\route-optimization:chainsync-platform-api-config" doc:name="Get Route Optimization">
        <ee:transform>
            <ee:variables>
                <ee:set-variable variableName="origin">attributes.queryParams.origin default "New York"</ee:set-variable>
                <ee:set-variable variableName="destination">attributes.queryParams.destination default "Boston"</ee:set-variable>
                <ee:set-variable variableName="vehicleId">attributes.queryParams.vehicleId default "TRUCK_001"</ee:set-variable>
            </ee:variables>
        </ee:transform>
        
        <flow-ref name="get:\environmental-data:chainsync-platform-api-config" doc:name="Get Environmental Data"/>
        
        <ee:transform>
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
var envData = payload.data

fun assessRouteRisk(stations) = avg(stations map $.riskAssessment.riskScore)

---
{
    routeOptimization: {
        vehicleId: vars.vehicleId,
        origin: vars.origin,
        destination: vars.destination,
        timestamp: now() as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"},
        currentRoute: {
            estimatedTime: "4 hours 30 minutes",
            distance: "350 km",
            fuelEstimate: "45 liters",
            riskScore: assessRouteRisk(envData),
            environmentalFactors: envData map ((station) -> {
                location: station.city,
                conditions: {
                    weather: station.weather.condition,
                    visibility: station.weather.visibility as String ++ " km",
                    airQuality: station.airQuality.level,
                    risk: station.riskAssessment.emergencyLevel
                }
            })
        },
        alternativeRoute: {
            recommended: if (envData some ($.riskAssessment.riskScore > 7)) true else false,
            reason: if (envData some ($.riskAssessment.riskScore > 7)) "Severe environmental conditions detected" else "Current route acceptable"
        },
        recommendations: [
            "Monitor weather conditions",
            "Plan refueling stops in cleaner areas",
            "Schedule breaks during good weather windows"
        ]
    }
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>

</mule>