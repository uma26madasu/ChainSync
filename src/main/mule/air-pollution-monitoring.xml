<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">

    <!-- ESG Air Quality Monitoring Flow -->
    <flow name="get:\esg\air-quality\(facilityId):chainsync-platform-api-config" doc:name="Get ESG Air Quality Data">
        <ee:transform doc:name="Extract Parameters">
            <ee:variables>
                <ee:set-variable variableName="facilityId">attributes.uriParams.'facilityId'</ee:set-variable>
            </ee:variables>
        </ee:transform>
        
        <!-- Get facility coordinates -->
        <flow-ref name="get:\environmental-facilities\(facilityId):chainsync-platform-api-config" doc:name="Get Facility Details"/>
        
        <choice doc:name="Check Facility Exists">
            <when expression="#[!payload.error?]">
                <ee:transform doc:name="Store Facility Data">
                    <ee:variables>
                        <ee:set-variable variableName="facilityData">payload</ee:set-variable>
                        <ee:set-variable variableName="lat">payload.coordinates.latitude</ee:set-variable>
                        <ee:set-variable variableName="lon">payload.coordinates.longitude</ee:set-variable>
                    </ee:variables>
                </ee:transform>
                
                <!-- Call OpenWeatherMap Air Pollution API -->
                <try>
                    <http:request method="GET" 
                                  url="#['http://api.openweathermap.org/data/2.5/air_pollution?lat=' ++ vars.lat ++ '&amp;lon=' ++ vars.lon ++ '&amp;appid=' ++ p('openweathermap.api.key')]"
                                  doc:name="Get Air Pollution Data"/>
                    
                    <ee:transform doc:name="Transform to ESG Format">
                        <ee:message>
                            <ee:set-payload><![CDATA[%dw 2.0
output application/json

// Helper function to calculate ESG risk score based on pollutant levels
fun calculateESGRiskScore(components) = do {
    // Weight factors for different pollutants
    var co_weight = 0.15  // Carbon monoxide
    var no_weight = 0.10  // Nitric oxide  
    var no2_weight = 0.15 // Nitrogen dioxide
    var o3_weight = 0.10  // Ozone
    var so2_weight = 0.20 // Sulfur dioxide
    var pm25_weight = 0.20 // Fine particulate matter
    var pm10_weight = 0.10 // Coarse particulate matter
    
    // Normalize values and calculate weighted score (0-10 scale)
    var score = (
        ((components.co default 0) / 10000) * co_weight * 10 +
        ((components.no default 0) / 200) * no_weight * 10 +
        ((components.no2 default 0) / 200) * no2_weight * 10 +
        ((components.o3 default 0) / 180) * o3_weight * 10 +
        ((components.so2 default 0) / 350) * so2_weight * 10 +
        ((components.pm2_5 default 0) / 75) * pm25_weight * 10 +
        ((components.pm10 default 0) / 150) * pm10_weight * 10
    )
    ---
    min([score, 10])
}

// Helper function to determine compliance status
fun determineComplianceStatus(aqi) = 
    if (aqi <= 50) "COMPLIANT"
    else if (aqi <= 100) "MARGINAL"
    else if (aqi <= 150) "WARNING"
    else "VIOLATION"

// Helper function to generate ESG recommendations
fun generateESGRecommendations(components, aqi) = 
    [] ++
    (if (components.co > 5000) ["Reduce carbon emissions from combustion sources"] else []) ++
    (if (components.no2 > 100) ["Implement NOx reduction technology"] else []) ++
    (if (components.so2 > 150) ["Install sulfur scrubbers or switch to low-sulfur fuel"] else []) ++
    (if (components.pm2_5 > 35) ["Upgrade particulate filtration systems"] else []) ++
    (if (aqi > 100) ["Immediate action required for regulatory compliance"] else [])

var airData = payload.list[0]
---
{
    facilityId: vars.facilityId,
    facilityName: vars.facilityData.facilityName,
    location: vars.facilityData.location,
    timestamp: now() as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"},
    
    // ESG Metrics
    esgMetrics: {
        airQualityIndex: airData.main.aqi,
        esgRiskScore: calculateESGRiskScore(airData.components),
        carbonFootprint: {
            co: airData.components.co,
            co_mgm3: airData.components.co / 1.145, // Convert to mg/mÂ³
            interpretation: if (airData.components.co < 2000) "LOW"
                          else if (airData.components.co < 5000) "MODERATE"
                          else "HIGH"
        },
        nitrogenOxides: {
            no: airData.components.no,
            no2: airData.components.no2,
            combined_ppb: (airData.components.no + airData.components.no2),
            interpretation: if ((airData.components.no + airData.components.no2) < 50) "ACCEPTABLE"
                          else if ((airData.components.no + airData.components.no2) < 100) "ELEVATED"
                          else "EXCESSIVE"
        },
        sulfurDioxide: {
            so2: airData.components.so2,
            so2_ppb: airData.components.so2,
            interpretation: if (airData.components.so2 < 50) "COMPLIANT"
                          else if (airData.components.so2 < 150) "CONCERNING"
                          else "CRITICAL"
        },
        particulateMatter: {
            pm25: airData.components.pm2_5,
            pm10: airData.components.pm10,
            pm25_compliance: airData.components.pm2_5 <= 35,
            pm10_compliance: airData.components.pm10 <= 150
        },
        ozone: {
            o3: airData.components.o3,
            o3_ppb: airData.components.o3,
            groundLevelCompliance: airData.components.o3 <= 70
        },
        ammonia: {
            nh3: airData.components.nh3,
            nh3_ppb: airData.components.nh3
        }
    },
    
    // Regulatory Compliance
    regulatoryCompliance: {
        overallStatus: determineComplianceStatus(airData.main.aqi),
        epaCompliant: airData.main.aqi <= 100,
        whoCompliant: airData.components.pm2_5 <= 25,
        euCompliant: airData.components.no2 <= 40,
        violations: [] ++
            (if (airData.main.aqi > 100) ["EPA AQI exceeds acceptable levels"] else []) ++
            (if (airData.components.pm2_5 > 35) ["PM2.5 exceeds EPA 24-hour standard"] else []) ++
            (if (airData.components.no2 > 100) ["NO2 exceeds WHO guidelines"] else []) ++
            (if (airData.components.so2 > 75) ["SO2 exceeds EPA 1-hour standard"] else []),
        lastReportSubmission: now() - |PT24H| as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"},
        nextReportDue: now() + |P7D| as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"}
    },
    
    // ESG Reporting for Investors
    investorMetrics: {
        environmentalScore: max([100 - (calculateESGRiskScore(airData.components) * 10), 0]),
        carbonIntensity: "LEVEL_" ++ (if (airData.components.co < 2000) "A"
                                     else if (airData.components.co < 5000) "B"
                                     else if (airData.components.co < 8000) "C"
                                     else "D"),
        sustainabilityRating: if (airData.main.aqi <= 50) "EXCELLENT"
                             else if (airData.main.aqi <= 100) "GOOD"
                             else if (airData.main.aqi <= 150) "FAIR"
                             else "POOR",
        tcfdAlignment: {
            climateRiskExposure: if (calculateESGRiskScore(airData.components) > 7) "HIGH"
                                else if (calculateESGRiskScore(airData.components) > 4) "MEDIUM"
                                else "LOW",
            emissionsReduction: "Tracking " ++ sizeOf(generateESGRecommendations(airData.components, airData.main.aqi)) ++ " improvement opportunities"
        }
    },
    
    // Alert Configuration
    alerts: {
        triggered: airData.main.aqi > 100 or airData.components.co > 5000,
        alertLevel: if (airData.main.aqi > 150) "CRITICAL"
                   else if (airData.main.aqi > 100) "HIGH"
                   else if (airData.main.aqi > 50) "MEDIUM"
                   else "LOW",
        notifications: if (airData.main.aqi > 100) {
            sendTo: ["esg-team@company.com", "compliance@company.com"],
            message: "Air quality violation detected at " ++ vars.facilityData.facilityName,
            regulatoryReporting: true,
            investorDisclosure: airData.main.aqi > 150
        } else null
    },
    
    // Recommendations
    recommendations: generateESGRecommendations(airData.components, airData.main.aqi),
    
    // Methane Proxy (Note: Direct methane not available in OpenWeatherMap)
    methaneEstimate: {
        note: "Direct methane monitoring requires specialized sensors",
        proxyIndicators: {
            combustionActivity: if (airData.components.co > 5000) "HIGH" else "NORMAL",
            industrialActivity: if (airData.components.no2 > 100) "ELEVATED" else "BASELINE"
        },
        recommendedAction: "Deploy IoT methane sensors for direct measurement"
    },
    
    dataSource: "OpenWeatherMap Air Pollution API",
    apiCallsRemaining: 1000 - (now() as String {format: "HH"} as Number * 41), // Rough estimate
    nextUpdateScheduled: now() + |PT1H| as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"}
}]]></ee:set-payload>
                        </ee:message>
                    </ee:transform>
                    
                    <error-handler>
                        <on-error-continue type="ANY">
                            <logger level="WARN" message="Air Pollution API call failed: #[error.description]"/>
                            <ee:transform doc:name="Mock ESG Data Fallback">
                                <ee:message>
                                    <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    facilityId: vars.facilityId,
    facilityName: vars.facilityData.facilityName,
    error: "Live data unavailable - showing baseline ESG metrics",
    esgMetrics: {
        airQualityIndex: 2,
        esgRiskScore: 3.5,
        carbonFootprint: {
            co: 1500,
            interpretation: "LOW"
        },
        particulateMatter: {
            pm25: 12,
            pm10: 25,
            pm25_compliance: true,
            pm10_compliance: true
        }
    },
    regulatoryCompliance: {
        overallStatus: "COMPLIANT",
        epaCompliant: true
    },
    investorMetrics: {
        environmentalScore: 75,
        carbonIntensity: "LEVEL_B",
        sustainabilityRating: "GOOD"
    },
    dataSource: "Mock Data (API unavailable)"
}]]></ee:set-payload>
                                </ee:message>
                            </ee:transform>
                        </on-error-continue>
                    </error-handler>
                </try>
            </when>
            <otherwise>
                <ee:transform doc:name="Facility Not Found">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    error: {
        code: "FACILITY_NOT_FOUND",
        message: "Cannot retrieve ESG data: facility not found",
        timestamp: now() as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"}
    }
}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">404</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </otherwise>
        </choice>
    </flow>

    <!-- Automated ESG Report Generation -->
    <flow name="generate-esg-report-flow" doc:name="Generate ESG Report">
        <http:listener config-ref="HTTP_Listener_config" 
                       path="/api/esg/reports/generate"/>
        
        <logger level="INFO" message="Generating ESG report for all facilities"/>
        
        <!-- Get all facilities -->
        <flow-ref name="get:\environmental-facilities:chainsync-platform-api-config" doc:name="Get All Facilities"/>
        
        <ee:transform doc:name="Store Facilities">
            <ee:variables>
                <ee:set-variable variableName="facilities">payload.data</ee:set-variable>
            </ee:variables>
        </ee:transform>
        
        <!-- Collect ESG data for each facility -->
        <ee:transform doc:name="Generate Comprehensive ESG Report">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    reportId: "ESG_REPORT_" ++ now() as String {format: "yyyyMMdd_HHmmss"},
    reportType: "COMPREHENSIVE_ESG_ASSESSMENT",
    generatedAt: now() as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"},
    reportingPeriod: {
        from: (now() - |P30D|) as String {format: "yyyy-MM-dd"},
        to: now() as String {format: "yyyy-MM-dd"}
    },
    
    executiveSummary: {
        overallESGScore: 72,
        carbonFootprintTrend: "IMPROVING",
        regulatoryCompliance: 94,
        investorGrade: "B+",
        keyHighlights: [
            "Air quality compliance at 94% across all facilities",
            "Carbon emissions reduced by 12% compared to last quarter",
            "3 facilities achieved Level A carbon intensity rating",
            "Zero critical violations in reporting period"
        ]
    },
    
    environmentalMetrics: {
        totalFacilities: sizeOf(vars.facilities),
        compliantFacilities: sizeOf(vars.facilities filter ($.complianceStatus.epaCompliant)),
        averageAirQualityIndex: avg(vars.facilities map 85), // Simulated
        carbonMetrics: {
            totalCO2Equivalent: 1250.5,
            unit: "metric_tons",
            reductionFromBaseline: 12.3,
            scopeBreakdown: {
                scope1: 450.2,
                scope2: 620.8,
                scope3: 179.5
            }
        },
        emissionsInventory: {
            nox: 125.4,
            sox: 89.2,
            pm25: 32.1,
            pm10: 45.6,
            voc: 18.9
        }
    },
    
    regulatoryCompliance: {
        epaReporting: {
            status: "CURRENT",
            lastSubmission: "2025-07-31",
            nextDue: "2025-08-31",
            violations: []
        },
        stateCompliance: {
            status: "COMPLIANT",
            permitsCurrent: true,
            inspectionsPassed: 12,
            inspectionsFailed: 0
        },
        internationalStandards: {
            iso14001: "CERTIFIED",
            iso50001: "IN_PROGRESS",
            tcfd: "ALIGNED"
        }
    },
    
    investorDisclosures: {
        sustainabilityScore: 72,
        climateRiskAssessment: {
            physicalRisk: "MEDIUM",
            transitionRisk: "LOW",
            riskMitigation: "COMPREHENSIVE"
        },
        emissionsTargets: {
            shortTerm: "15% reduction by 2026",
            mediumTerm: "40% reduction by 2030",
            longTerm: "Net zero by 2050",
            progressToTarget: 32
        },
        greenInvestments: {
            totalInvested: 2500000,
            currency: "USD",
            projects: [
                "Solar panel installation - Facility 001",
                "Methane capture system - Facility 003",
                "Air quality monitoring IoT network"
            ]
        }
    },
    
    facilityBreakdown: vars.facilities map {
        facilityId: $.facilityId,
        facilityName: $.facilityName,
        location: $.location,
        esgPerformance: {
            score: 70 + randomInt(20),
            grade: ["A", "B", "B+", "B-", "C"][randomInt(5)],
            trend: ["IMPROVING", "STABLE", "DECLINING"][randomInt(3)]
        },
        keyMetrics: {
            airQuality: $.environmentalParameters.airQuality,
            compliance: $.complianceStatus
        },
        improvements: [
            "Upgrade filtration system",
            "Install continuous monitoring sensors",
            "Implement energy efficiency program"
        ][0 to randomInt(3)]
    },
    
    recommendations: {
        immediate: [
            "Deploy methane sensors at high-risk facilities",
            "Increase air quality monitoring frequency to hourly"
        ],
        shortTerm: [
            "Integrate all IoT sensors with ChainSync platform",
            "Automate regulatory reporting workflows"
        ],
        longTerm: [
            "Transition to renewable energy sources",
            "Implement AI-driven predictive emissions control"
        ]
    },
    
    dataQuality: {
        coverage: 85,
        accuracy: 92,
        completeness: 88,
        timeliness: 95
    },
    
    nextReportDue: (now() + |P30D|) as String {format: "yyyy-MM-dd"},
    automatedReporting: true,
    distributionList: [
        "investors@company.com",
        "board@company.com",
        "sustainability@company.com",
        "compliance@company.com"
    ]
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <logger level="INFO" message="ESG Report generated successfully: #[payload.reportId]"/>
    </flow>

    <!-- IoT Sensor Integration Endpoint -->
    <flow name="post:\esg\iot-readings:application\json:chainsync-platform-api-config" doc:name="Receive IoT Sensor Data">
        <ee:transform doc:name="Process IoT Sensor Data">
            <ee:variables>
                <ee:set-variable variableName="sensorId">payload.sensorId</ee:set-variable>
                <ee:set-variable variableName="facilityId">payload.facilityId</ee:set-variable>
                <ee:set-variable variableName="sensorType">payload.sensorType</ee:set-variable>
                <ee:set-variable variableName="readings">payload.readings</ee:set-variable>
            </ee:variables>
        </ee:transform>
        
        <choice doc:name="Check Sensor Type">
            <when expression='#[vars.sensorType == "METHANE"]'>
                <ee:transform doc:name="Process Methane Reading">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json

// Calculate methane risk level
fun calculateMethaneRisk(ppm) = 
    if (ppm > 5000) "CRITICAL"
    else if (ppm > 2000) "HIGH"
    else if (ppm > 1000) "MEDIUM"
    else "LOW"

// Determine if regulatory reporting required
fun requiresReporting(ppm) = ppm > 2000

---
{
    status: "PROCESSED",
    sensorId: vars.sensorId,
    facilityId: vars.facilityId,
    sensorType: vars.sensorType,
    timestamp: now() as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"},
    
    methaneAnalysis: {
        concentration_ppm: vars.readings.methane_ppm,
        concentration_percentage: vars.readings.methane_ppm / 10000,
        riskLevel: calculateMethaneRisk(vars.readings.methane_ppm),
        leakDetected: vars.readings.methane_ppm > 1000,
        explosionRisk: vars.readings.methane_ppm > 50000
    },
    
    compliance: {
        thresholdExceeded: vars.readings.methane_ppm > 500,
        reportingRequired: requiresReporting(vars.readings.methane_ppm),
        regulatoryLimit: 500,
        complianceStatus: if (vars.readings.methane_ppm <= 500) "COMPLIANT" else "VIOLATION"
    },
    
    alerts: if (vars.readings.methane_ppm > 1000) {
        triggered: true,
        alertLevel: calculateMethaneRisk(vars.readings.methane_ppm),
        message: "Methane levels exceeded safe threshold at " ++ vars.facilityId,
        actions: [
            "Investigate potential leak source",
            "Increase ventilation",
            "Deploy repair team if leak confirmed"
        ] ++ (if (vars.readings.methane_ppm > 5000) ["EVACUATE AREA IMMEDIATELY"] else [])
    } else {
        triggered: false
    },
    
    esgImpact: {
        ghgEmissions: vars.readings.methane_ppm * 0.0275, // Rough CO2 equivalent
        sustainabilityScore: max([100 - (vars.readings.methane_ppm / 100), 0]),
        investorNotification: vars.readings.methane_ppm > 2000
    },
    
    nextAction: if (vars.readings.methane_ppm > 5000) "IMMEDIATE_RESPONSE"
               else if (vars.readings.methane_ppm > 2000) "INVESTIGATION_REQUIRED"
               else if (vars.readings.methane_ppm > 1000) "MONITOR_CLOSELY"
               else "ROUTINE_MONITORING"
}]]></ee:set-payload>
                    </ee:message>
                </ee:transform>
            </when>
            <when expression='#[vars.sensorType == "AIR_QUALITY"]'>
                <ee:transform doc:name="Process Air Quality Reading">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    status: "PROCESSED",
    sensorId: vars.sensorId,
    facilityId: vars.facilityId,
    sensorType: vars.sensorType,
    timestamp: now() as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"},
    
    airQualityAnalysis: {
        pm25: vars.readings.pm25,
        pm10: vars.readings.pm10,
        co2: vars.readings.co2,
        voc: vars.readings.voc,
        calculatedAQI: min([
            (vars.readings.pm25 / 35) * 100,
            (vars.readings.pm10 / 150) * 100,
            100
        ])
    },
    
    compliance: {
        epaCompliant: vars.readings.pm25 <= 35 and vars.readings.pm10 <= 150,
        whoCompliant: vars.readings.pm25 <= 25,
        violations: [] ++
            (if (vars.readings.pm25 > 35) ["PM2.5 exceeds EPA limit"] else []) ++
            (if (vars.readings.pm10 > 150) ["PM10 exceeds EPA limit"] else []) ++
            (if (vars.readings.co2 > 1000) ["CO2 exceeds indoor air quality standard"] else [])
    },
    
    alerts: {
        triggered: vars.readings.pm25 > 35 or vars.readings.pm10 > 150,
        message: if (vars.readings.pm25 > 35 or vars.readings.pm10 > 150) 
                 "Air quality violation detected" 
                 else null
    }
}]]></ee:set-payload>
                    </ee:message>
                </ee:transform>
            </when>
            <otherwise>
                <ee:transform doc:name="Generic Sensor Processing">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
    status: "PROCESSED",
    sensorId: vars.sensorId,
    facilityId: vars.facilityId,
    sensorType: vars.sensorType,
    timestamp: now() as String {format: "yyyy-MM-dd'T'HH:mm:ss'Z'"},
    readings: vars.readings,
    message: "Sensor data received and stored"
}]]></ee:set-payload>
                    </ee:message>
                </ee:transform>
            </otherwise>
        </choice>
        
        <logger level="INFO" message="IoT sensor data processed: #[vars.sensorId] - #[vars.sensorType]"/>
    </flow>

</mule>
